=begin pod

html-template - a trivial benchmark test for the HTML::Template module.

Depends on the data/html-template.tmpl tenplate file.

Usage: perl6 perl6/html-template template-file iteration-count
       perl6 perl6/html-template --test

Run with --test as the first argument to invoke the built-in unit test.

=end pod

use v6;

use HTML::Template;
use File::Temp;


multi MAIN(Str $template-file, Int $iteration-count) {
    if !($template-file && defined($iteration-count)) {
        note "Usage: perl6 perl6/html-template template-file iteration-count\n",
             "       perl6 perl6/html-template --test\n";
        exit 1;
    }

    # output to /dev/null
    my $outfile = IO::Spec.devnull;

    render $template-file, $iteration-count, $outfile;
}

multi MAIN(Bool :$test) { 

    # output to a temp file so we can validate it later
    my ($outfile) = (tempfile(:!unlink))[0];
    my $template-file = 'data/html-template-small.tmpl';
    my $iteration-count = 1;

    use Test;
    plan 1;
    note "# testing using $template-file template for $iteration-count iterations";
    note "# outputting to $outfile";

    render $template-file, $iteration-count, $outfile;

    my $cmpcmd = "diff --brief --ignore-case data/html-template-small.html $outfile";
    note "# compare cmd: $cmpcmd";
    my $stat = shell $cmpcmd;
    ok $stat, 'verifying output' 
        and unlink($outfile); # leave $outfile if compare fails
}

sub render (Str $template-file, Int $iteration-count, Str $outfile) {

    my $out = open $outfile, :w or
        die "$outfile: failed to open: $!\n";

    for ^$iteration-count {
        # open the html template
        my $template = HTML::Template.from_file($template-file);

        # fill in some parameters
        $template.param( Pair.new(key => 'MONSTROUS', value => 'monstrous') );
        $template.param( Pair.new(key => 'THE', value => 'the') );
        $template.param( Pair.new(key => 'COMPENDIUM', value => 'compendium') );

        # print the template output
        $out.print($template.output) or
            die "$outfile: write failed: $!\n";
    }

    $out.close;
}

# end
